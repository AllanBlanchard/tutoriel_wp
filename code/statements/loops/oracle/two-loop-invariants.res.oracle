# frama-c -wp [...]
[kernel] Parsing two-loop-invariants.c (with preprocessing)
[wp] Running WP plugin...
[wp] [Valid] Goal main_exits (Cfg) (Unreachable)
[wp] Warning: Missing RTE guards
[wp] 6 goals scheduled
[wp] [Unsuccess] typed_main_terminates (Qed)
[wp] [Unsuccess] typed_main_loop_invariant_I1_preserved (Qed)
[wp] [Valid] typed_main_loop_invariant_I1_established (Qed)
[wp] [Valid] typed_main_loop_invariant_I2_preserved (Qed)
[wp] [Valid] typed_main_loop_invariant_I2_established (Qed)
[wp] [Valid] typed_main_loop_assigns (Qed)
[wp] Proved goals:    5 / 7
  Unreachable:     1
  Qed:             4
  Unsuccess:       2
------------------------------------------------------------
  Function main
------------------------------------------------------------

Goal Termination-condition (generated) in 'main':
Loop termination at line 12
Prove: false.
Prover Qed returns Unsuccess

------------------------------------------------------------

Goal Preservation of Invariant 'I1' (file two-loop-invariants.c, line 8):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Initializer *)
  Init: (Init_x_0=true).
  (* Initializer *)
  Init: x_2 = 0.
  (* Invariant 'I1' *)
  Have: 0 <= x_2.
  (* Invariant 'I2' *)
  Have: x_2 <= 10.
  (* Loop assigns ... *)
  Have: ((Init_x_0=true) -> (Init_x_1=true)).
  (* Invariant 'I1' *)
  Have: 0 <= x_1.
  (* Invariant 'I2' *)
  Have: x_1 <= 10.
  (* Then *)
  Have: x_1 <= 9.
  Have: (1 + x_1) = x.
}
Prove: 0 <= x.
Prover Qed returns Unsuccess

------------------------------------------------------------

Goal Establishment of Invariant 'I1' (file two-loop-invariants.c, line 8):
Assume { Type: is_sint32(x). (* Initializer *) Init: x = 0. }
Prove: 0 <= x.
Prover Qed returns Valid

------------------------------------------------------------

Goal Preservation of Invariant 'I2' (file two-loop-invariants.c, line 9):
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2).
  (* Initializer *)
  Init: (Init_x_0=true).
  (* Initializer *)
  Init: x_2 = 0.
  (* Invariant 'I1' *)
  Have: 0 <= x_2.
  (* Invariant 'I2' *)
  Have: x_2 <= 10.
  (* Loop assigns ... *)
  Have: ((Init_x_0=true) -> (Init_x_1=true)).
  (* Invariant 'I1' *)
  Have: 0 <= x_1.
  (* Invariant 'I2' *)
  Have: x_1 <= 10.
  (* Then *)
  Have: x_1 <= 9.
  Have: (1 + x_1) = x.
  (* Invariant 'I1' *)
  Have: 0 <= x.
}
Prove: x <= 10.
Prover Qed returns Valid

------------------------------------------------------------

Goal Establishment of Invariant 'I2' (file two-loop-invariants.c, line 9):
Assume {
  Type: is_sint32(x).
  (* Initializer *)
  Init: x = 0.
  (* Invariant 'I1' *)
  Have: 0 <= x.
}
Prove: x <= 10.
Prover Qed returns Valid

------------------------------------------------------------

Goal Loop assigns (file two-loop-invariants.c, line 10):
Prove: true.
Prover Qed returns Valid

------------------------------------------------------------
[wp:pedantic-assigns] two-loop-invariants.c:5: Warning: 
  No 'assigns' specification for function 'main'.
  Callers assumptions might be imprecise.
